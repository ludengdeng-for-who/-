1.<script>元素的8个属性
    *async:可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。
    *charset：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。
    *crossorigin：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。
        crossorigin="anonymous"配置文件请求不必设置凭据标志。crossorigin="use-credentials"设置凭据标志，意味着出站请求会包含凭据。
    *defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。
        在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。
    *integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，
        Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，
        脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提
        供恶意内容。
    *language:废弃。最初用于表示代码块中的脚本语言（如"JavaScript"、"JavaScript 1.2"或"VBScript"）。大多数浏览器都会忽略这个属性，不应该再使用它。
    *src：可选。表示包含要执行的代码的外部文件。
    *type:可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。按照惯
        例，这个值始终都是"text/javascript"，尽管"text/javascript"和"text/ecmascript"
        都已经废弃了。JavaScript 文件的 MIME 类型通常是"application/x-javascript"，不过给
        type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有
        "application/javascript"和"application/ecmascript"。如果这个值是 module，则代
        码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。
        使用<script>的方式有两种：通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页
2.var声明提升
    function foo() {
    console.log(age);
    var age = 26;
    }
    foo(); // undefined
    这就是所谓的“提升”（hoist），也就是把所有变量声明都拉到函数作用域的顶部。
3.let声明    
    let 跟 var 的作用差不多，但有着非常重要的区别。最明显的区别是，let 声明的范围是块作用域，而 var 声明的范围是函数作用域。
    if (true) {
    var name = 'Matt';
    console.log(name); // Matt
    }
    console.log(name); // Matt 
    --------------------------------
    if (true) {
     let age = 26;
     console.log(age); // 26
    }
    console.log(age); // ReferenceError: age 没有定义

    let 也不允许同一个块作用域中出现冗余声明。这样会导致报错：
    var name;
    var name;
    let age;
    let age; // SyntaxError；标识符 age 已经声明过了

4.let和var区别
    1. 暂时性死区
    let 与 var 的另一个重要的区别，就是 let 声明的变量不会在作用域中被提升。
    // name 会被提升
    console.log(name); // undefined
    var name = 'Matt';
    ---------------------------------
    // age 不会被提升
    console.log(age); // ReferenceError：age 没有定义
    let age = 26;
    
    在解析代码时，JavaScript 引擎也会注意出现在块后面的 let 声明，只不过在此之前不能以任何方
    式来引用未声明的变量。在 let 声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone），在此
    阶段引用任何后面才声明的变量都会抛出 ReferenceError。
    2. 全局声明
    与 var 关键字不同，使用 let 在全局作用域中声明的变量不会成为 window 对象的属性（var 声
    明的变量则会）。
    var name = 'Matt';
    console.log(window.name); // 'Matt'
    let age = 26;
    console.log(window.age); // undefined
    不过，let 声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了
    避免 SyntaxError，必须确保页面不会重复声明同一个变量。
    3. 条件声明
    在使用 var 声明变量时，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合
    并为一个声明。因为 let 的作用域是块，所以不可能检查前面是否已经使用 let 声明过同名变量，同
    时也就不可能在没有声明的情况下声明它。
    4. for 循环中的 let 声明
    在 let 出现之前，for 循环定义的迭代变量会渗透到循环体外部：
    for (var i = 0; i < 5; ++i) {
     // 循环逻辑
    }
    console.log(i); // 5
    改成使用 let 之后，这个问题就消失了，因为迭代变量的作用域仅限于 for 循环块内部：
    for (let i = 0; i < 5; ++i) {
     // 循环逻辑
    }
    console.log(i); // ReferenceError: i 没有定义
    在使用 var 的时候，最常见的问题就是对迭代变量的奇特声明和修改：
    for (var i = 0; i < 5; ++i) {
     setTimeout(() => console.log(i), 0)
    }
    // 你可能以为会输出 0、1、2、3、4
    // 实际上会输出 5、5、5、5、5
    之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时
    逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。
    而在使用 let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。
    每个 setTimeout 引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循
    环执行过程中每个迭代变量的值。
    for (let i = 0; i < 5; ++i) {
     setTimeout(() => console.log(i), 0)
    }
    // 会输出 0、1、2、3、4
    这种每次迭代声明一个独立变量实例的行为适用于所有风格的 for 循环，包括 for-in 和 for-of
    循环。
5.const声明
    const 的行为与 let 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且
    尝试修改 const 声明的变量会导致运行时错误。
    ☆☆☆const 声明的限制只适用于它指向的变量的引用。换句话说，如果 const 变量引用的是一个对象，
    那么修改这个对象内部的属性并不违反 const 的限制。
6.数据类型
    简单数据类型（原始类型）：Undefined、Null、Boolean、Number、String 和 Symbol
    复杂类型（引用类型）：Object（对象）
7.typeof操作符
    "undefined"表示值未定义；
    "boolean"表示值为布尔值；
    "string"表示值为字符串；
    "number"表示值为数值；
    "object"表示值为对象（而不是函数）或 null；
    "function"表示值为函数；
    "symbol"表示值为符号。
    ★★★注意typeof在某些情况下返回的结果可能会让人费解，但技术上讲还是正确的。比如，调用typeof
    null 返回的是"object"。这是因为特殊值 null 被认为是一个对空对象的引用。

    在对未初始化的变量调用 typeof 时，返回的结果是"undefined"，但对未声明的变量调用它时，
    返回的结果还是"undefined"，这就有点让人看不懂了。比如下面的例子：
    let message; // 这个变量被声明了，只是值为 undefined
    // 确保没有声明过这个变量
    // let age
    console.log(typeof message); // "undefined"
    console.log(typeof age); // "undefined"
    无论是声明还是未声明，typeof 返回的都是字符串"undefined"。逻辑上讲这是对的，因为虽然
    严格来讲这两个变量存在根本性差异，但它们都无法执行实际操作。
    -----------------------------------
    let message; // 这个变量被声明了，只是值为 undefined
    // age 没有声明
    if (message) {
     // 这个块不会执行
    }
    if (!message) {
     // 这个块会执行
    }
    if (age) {
     // 这里会报错
    } 

    undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等，如下面的例
    子所示：
    console.log(null == undefined); // true

8.Boolean数据类型转换
    Boolean         true                       false
    String          非空字符串                   ""（空字符串）
    Number          非零数值（包括无穷值）        0、NaN（参见后面的相关内容）
    Object          任意对象                     null
    Undefined       N/A（不存在）             undefined
9.NaN
    NaN 有几个独特的属性。首先，任何涉及 NaN 的操作始终返回 NaN（如 NaN/10），在连续多步计算
    时这可能是个问题。其次，NaN 不等于包括 NaN 在内的任何值。例如，下面的比较操作会返回 false：
    console.log(NaN == NaN); // false 

    ECMAScript 提供了 isNaN()函数。该函数接收一个参数，可以是任意数据类型，然后判断
    这个参数是否“不是数值”。把一个值传给 isNaN()后，该函数会尝试把它转换为数值。某些非数值的
    值可以直接转换成数值，如字符串"10"或布尔值。任何不能转换为数值的值都会导致这个函数返回
    true。
    console.log(isNaN(NaN)); // true
    console.log(isNaN(10)); // false，10 是数值
    console.log(isNaN("10")); // false，可以转换为数值 10
    console.log(isNaN("blue")); // true，不可以转换为数值
    console.log(isNaN(true)); // false，可以转换为数值 1 

10.数值转换
    Number()：
     布尔值，true 转换为 1，false 转换为 0。
     数值，直接返回。
     null，返回 0。
     undefined，返回 NaN。
     字符串，应用以下规则。
         如果字符串包含数值字符，包括数值字符前面带加、减号的情况，则转换为一个十进制数值。
        因此，Number("1")返回 1，Number("123")返回 123，Number("011")返回 11（忽略前面
        的零）。
         如果字符串包含有效的浮点值格式如"1.1"，则会转换为相应的浮点值（同样，忽略前面的零）。
         如果字符串包含有效的十六进制格式如"0xf"，则会转换为与该十六进制值对应的十进制整
        数值。
         如果是空字符串（不包含字符），则返回 0。
         如果字符串包含除上述情况之外的其他字符，则返回 NaN。
     对象，调用 valueOf()方法，并按照上述规则转换返回的值。如果转换结果是 NaN，则调用
    toString()方法，再按照转换字符串的规则转换。

    parseInt()：
    let num1 = parseInt("1234blue"); // 1234
    let num2 = parseInt(""); // NaN
    let num3 = parseInt("0xA"); // 10，解释为十六进制整数
    let num4 = parseInt(22.5); // 22
    let num5 = parseInt("70"); // 70，解释为十进制值
    let num6 = parseInt("0xf"); // 15，解释为十六进制整数

11.String数值转换
    toString():toString()方法可见于数值、布尔值、对象和字符串值。（没错，字符串值也有 toString()方法，
    该方法只是简单地返回自身的一个副本。）null 和 undefined 值没有 toString()方法。

    String():
     如果值有 toString()方法，则调用该方法（不传参数）并返回结果。
     如果值是 null，返回"null"。
     如果值是 undefined，返回"undefined"。
    下面看几个例子：
    let value1 = 10;
    let value2 = true;
    let value3 = null;
    let value4;
    console.log(String(value1)); // "10"
    console.log(String(value2)); // "true"
    console.log(String(value3)); // "null"
    console.log(String(value4)); // "undefined" 

12.Object类型
    每个 Object 实例都有如下属性和方法。
     constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object()
    函数。
     hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属
    性。要检查的属性名必须是字符串（如 o.hasOwnProperty("name")）或符号。
     isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。（第 8 章将详细介绍
    原型。）
     propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用（本章稍后讨
    论的）for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。
     toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。
     toString()：返回对象的字符串表示。
     valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。

13.逻辑非（！）
    逻辑非操作符由一个叹号（!）表示，可应用给 ECMAScript 中的任何值。这个操作符始终返回布
    尔值，无论应用到的是什么数据类型。逻辑非操作符首先将操作数转换为布尔值，然后再对其取反。换
    句话说，逻辑非操作符会遵循如下规则。
     如果操作数是对象，则返回 false。
     如果操作数是空字符串，则返回 true。
     如果操作数是非空字符串，则返回 false。
     如果操作数是数值 0，则返回 true。
     如果操作数是非 0 数值（包括 Infinity），则返回 false。
     如果操作数是 null，则返回 true。
     如果操作数是 NaN，则返回 true。
     如果操作数是 undefined，则返回 true。
    以下示例验证了上述行为：
    console.log(!false); // true
    console.log(!"blue"); // false
    console.log(!0); // true
    console.log(!NaN); // true
    console.log(!""); // true
    console.log(!12345); // false 

    !! 和BOOlean()效果一样
    console.log(!!"blue"); // true
    console.log(!!0); // false
    console.log(!!NaN); // false
    console.log(!!""); // false
    console.log(!!12345); // true 

14.逻辑与
    逻辑与操作符由两个和号（&&）表示
    true true true
    true false false
    false true false
    false false false
    第一个为false，直接返回false，
    第一个为true，返回第二个条件
15.逻辑或
    true true true
    true false true
    false true true
    false false false
    有true，返回true，其他返回false

16.指数操作符（**）
    console.log(Math.pow(3, 2); // 9
    console.log(3 ** 2); // 9
    console.log(Math.pow(16, 0.5); // 4
    console.log(16** 0.5); // 4 
    ----------------------------
    let squared = 3;
    squared **= 2;
    console.log(squared); // 9

17.加法操作中的类型转换
    如果两个操作数都是数值，加法操作符执行加法运算并根据如下规则返回结果：
     如果有任一操作数是 NaN，则返回 NaN；
     如果是 Infinity 加 Infinity，则返回 Infinity；
     如果是-Infinity 加-Infinity，则返回-Infinity；
     如果是 Infinity 加-Infinity，则返回 NaN；
     如果是+0 加+0，则返回+0；
     如果是-0 加+0，则返回+0；
     如果是-0 加-0，则返回-0。
    不过，如果有一个操作数是字符串，则要应用如下规则：
     如果两个操作数都是字符串，则将第二个字符串拼接到第一个字符串后面；
     如果只有一个操作数是字符串，则将另一个操作数转换为字符串，再将两个字符串拼接在一起。

18.ECMAScript 中所有函数的参数都是按值传递的。
        这意味着函数外的值会被复制到函数内部的参数
    中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是
    引用值，那么就跟引用值变量的复制一样。

19.instanceof操作符
    console.log(person instanceof Object); // 变量 person 是 Object 吗？
    console.log(colors instanceof Array); // 变量 colors 是 Array 吗？
    console.log(pattern instanceof RegExp); // 变量 pattern 是 RegExp 吗？
        按照定义，所有引用值都是 Object 的实例，因此通过 instanceof 操作符检测任何引用值和
    Object 构造函数都会返回 true。类似地，如果用 instanceof 检测原始值，则始终会返回 false，
    因为原始值不是对象。

20.执行上下文
        每个上下文都有一个关联的变量对象（variable object），
    而这个上下文中定义的所有变量和函数都存在于这个对象上。
    虽然无法通过代码访问变量对象，但后台处理数据会用到它。
        在浏览器中，全局上下文就是我们常说的 window 对象（第 12 章会详细介绍），
    因此所有通过 var 定义的全局变量和函数都会成为 window 对象的属性和方法。
    使用 let 和 const 的顶级声明不会定义在全局上下文中，但在作用域链解析上效果是一样的。
        上下文在其所有代码都执行完毕后会被销毁，包括定义
    在它上面的所有变量和函数（全局上下文在应用程序退出前才会被销毁，比如关闭网页或退出浏览器）。
        每个函数调用都有自己的上下文。当代码执行流进入函数时，函数的上下文被推到一个上下文栈上。
    在函数执行完之后，上下文栈会弹出该函数上下文，将控制权返还给之前的执行上下文。ECMAScript
    程序的执行流就是通过这个上下文栈进行控制的。
        上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）。这个作用域链决定
    了各级上下文中的代码在访问变量和函数时的顺序。代码正在执行的上下文的变量对象始终位于作用域
    链的最前端。如果上下文是函数，则其活动对象（activation object）用作变量对象。活动对象最初只有
    一个定义变量：arguments。（全局上下文中没有这个变量。）作用域链中的下一个变量对象来自包含上
    下文，再下一个对象来自再下一个包含上下文。以此类推直至全局上下文；全局上下文的变量对象始终
    是作用域链的最后一个变量对象。
21.Date几个显示时间的方法
    const d = new Date();
    console.log(d.toDateString());Thu Oct 15 2020
    console.log(d.toTimeString());10:36:10 GMT+0800 (GMT+08:00)
    console.log(d.toLocaleDateString());2020-10-15
    console.log(d.toLocaleTimeString());10:36:10 AM
    console.log(d.toUTCString());Thu, 15 Oct 2020 02:36:10 GMT
    
    
22.string一些方法
     padStart()和 padEnd()

    let stringValue = "foo";
    console.log(stringValue.padStart(6)); // " foo"
    console.log(stringValue.padStart(9, ".")); // "......foo"
    console.log(stringValue.padEnd(6)); // "foo "
    console.log(stringValue.padEnd(9, ".")); // "foo......" 

    字符串也可以使用解构
    let message = "abcde";
    console.log([...message]); // ["a", "b", "c", "d", "e"]

23.内置对象
        ECMA-262 对内置对象的定义是“任何由 ECMAScript 实现提供、与宿主环境无关，并在 ECMAScript
    程序开始执行时就存在的对象”。
    
24.Global内置对象
        Global 对象是 ECMAScript 中最特别的对象，因为代码不会显式地访问它。ECMA-262 规定 Global
    对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函
    数这种东西。在全局作用域中定义的变量和函数都会变成 Global 对象的属性 。本书前面介绍的函数，
    包括 isNaN()、isFinite()、parseInt()和 parseFloat()，实际上都是 Global 对象的方法。除
    了这些，Global 对象上还有另外一些方法。
25.Window
        虽然 ECMA-262 没有规定直接访问 Global 对象的方式，但浏览器将 window 对象实现为 Global
    对象的代理。因此，所有全局作用域中声明的变量和函数都变成了 window 的属性。
26.Math

27.检测数组
    使用instanceof  value instanceof Array
    Array.isArray()

28.数组的五个迭代方法
     every()：对数组每一项都运行传入的函数，如果对每一项函数都返回 true，则这个方法返回 true。
     filter()：对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回。
     forEach()：对数组每一项都运行传入的函数，没有返回值。
     map()：对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。
     some()：对数组每一项都运行传入的函数，如果有一项函数返回 true，则这个方法返回 true。
29.map 
    // 使用嵌套数组初始化映射
    const m1 = new Map([
     ["key1", "val1"],
     ["key2", "val2"],
     ["key3", "val3"]
    ]);
    alert(m1.size); // 3 
    初始化之后，可以使用 set()方法再添加键/值对。另外，可以使用 get()和 has()进行查询，可
    以通过 size 属性获取映射中的键/值对的数量，还可以使用 delete()和 clear()删除值。

30.set
    // 使用数组初始化集合
    const s1 = new Set(["val1", "val2", "val3"]);
    alert(s1.size); // 3 
        初始化之后，可以使用 add()增加值，使用 has()查询，通过 size 取得元素数量，以及使用 delete()
    和 clear()删除元素

31.数据属性
        数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置。数据属性有 4
    个特性描述它们的行为。
     [[Configurable]]：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特
    性，以及是否可以把它改为访问器属性。默认情况下，所有直接定义在对象上的属性的这个特
    性都是 true，如前面的例子所示。
     [[Enumerable]]：表示属性是否可以通过 for-in 循环返回。默认情况下，所有直接定义在对
    象上的属性的这个特性都是 true，如前面的例子所示。
     [[Writable]]：表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的
    这个特性都是 true，如前面的例子所示。
     [[Value]]：包含属性实际的值。这就是前面提到的那个读取和写入属性值的位置。这个特性
    的默认值为 undefined。
    
32.访问器属性
        访问器属性不包含数据值。相反，它们包含一个获取（getter）函数和一个设置（setter）函数，不
    过这两个函数不是必需的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效
    的值。在写入访问器属性时，会调用设置函数并传入新值，这个函数必须决定对数据做出什么修改。访
    问器属性有 4 个特性描述它们的行为。
    定义多个属性：
        在一个对象上同时定义多个属性的可能性是非常大的。为此，ECMAScript 提供了 Object.defineProperties()方法。
    这个方法可以通过多个描述符一次性定义多个属性。
    let book = {};
    Object.defineProperties(book, {
      year_: {
        value: 2017,
      },
      edition: {
        value: 1,
      },
      year: {
        get() {
          return this.year_;
        },
        set(newValue) {
          if (newValue > 2017) {
            this.year_ = newValue;
            this.edition += newValue - 2017;
          }
        },
      },
    });

33.合并对象
    Object.assign()
        这个方法接收一个目标对象和一个或多个源对象作为参数，
    然后将每个源对象中可枚举（Object.propertyIsEnumerable()返回 true）
    和自有（Object.hasOwnProperty()返回 true）属性复制到目标对象。
    修改目标对象，也会返回修改后的目标对象。
        Object.assign()实际上对每个源对象执行的是浅复制。如果多个源对象都有相同的属性，则使
    用最后一个复制的值。此外，从源对象访问器属性取得的值，比如获取函数，会作为一个静态值赋给目
    标对象。换句话说，不能在两个对象间转移获取函数和设置函数。

34.对象标识及相等判定
    Object.is()
    console.log(Object.is(true, 1)); // false
    console.log(Object.is({}, {})); // false
    console.log(Object.is("2", 2)); // false
    // 正确的 0、-0、+0 相等/不等判定
    console.log(Object.is(+0, -0)); // false
    console.log(Object.is(+0, 0)); // true
    console.log(Object.is(-0, 0)); // false
    // 正确的 NaN 相等判定
    console.log(Object.is(NaN, NaN)); // true 
35.解构赋值
    解构在内部使用函数 ToObject()（不能在运行时环境中直接访问）把源数据结构转换为对象。这
    意味着在对象解构的上下文中，原始值会被当成对象。这也意味着（根据 ToObject()的定义），null
    和 undefined 不能被解构，否则会抛出错误。
    let { length } = 'foobar';
    console.log(length); // 6
    let { constructor: c } = 4;
    console.log(c === Number); // true
    let { _ } = null; // TypeError
    let { _ } = undefined; // TypeError 

        解构并不要求变量必须在解构表达式中声明。不过，如果是给事先声明的变量赋值，则赋值表达式
    必须包含在一对括号中：
    let personName, personAge;
    let person = {
     name: 'Matt',
     age: 27
    };
    ({name: personName, age: personAge} = person);
    console.log(personName, personAge); // Matt, 27 

36.工厂模式
    工厂模式是一种众所周知的设计模式，广泛应用于软件工程领域，用于抽象创建特定对象的过程。
    function createPerson(name, age, job) {
     let o = new Object();
     o.name = name;
     o.age = age;
     o.job = job;
     o.sayName = function() {
     console.log(this.name);
     };
     return o;
    }
    let person1 = createPerson("Nicholas", 29, "Software Engineer");
    let person2 = createPerson("Greg", 27, "Doctor"); 
    这种工厂模式虽然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）。
37.构造函数模式
        像 Object 和 Array 这
    样的原生构造函数，运行时可以直接在执行环境中使用。当然也可以自定义构造函数，以函数的形式为
    自己的对象类型定义属性和方法。
    function Person(name, age, job){
     this.name = name;
     this.age = age;
     this.job = job;
     this.sayName = function() {
     console.log(this.name);
     };
    }
    let person1 = new Person("Nicholas", 29, "Software Engineer");
    let person2 = new Person("Greg", 27, "Doctor");
    person1.sayName(); // Nicholas
    person2.sayName(); // Greg 
        在这个例子中，Person()构造函数代替了 createPerson()工厂函数。实际上，Person()内部
    的代码跟 createPerson()基本是一样的，只是有如下区别。
     没有显式地创建对象。
     属性和方法直接赋值给了 this。
     没有 return。
    要创建 Person 的实例，应使用 new 操作符。以这种方式调用构造函数会执行如下操作。
    (1) 在内存中创建一个新对象。
    (2) 这个新对象内部的[[Prototype]]特性被赋值为构造函数的 prototype 属性。
    (3) 构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。
    (4) 执行构造函数内部的代码（给新对象添加属性）。
    (5) 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。

38.原型层级
        在通过对象访问属性时，会按照这个属性的名称开始搜索。搜索开始于对象实例本身。如果在这个
    实例上发现了给定的名称，则返回该名称对应的值。如果没有找到这个属性，则搜索会沿着指针进入原
    型对象，然后在原型对象上找到属性后，再返回对应的值。因此，在调用 person1.sayName()时，会
    发生两步搜索。首先，JavaScript 引擎会问：“person1 实例有 sayName 属性吗？”答案是没有。然后，
    继续搜索并问：“person1 的原型有 sayName 属性吗？”答案是有。于是就返回了保存在原型上的这
    个函数。在调用 person2.sayName()时，会发生同样的搜索过程，而且也会返回相同的结果。这就是
    原型用于在多个对象实例间共享属性和方法的原理。

39.super
     super 只能在派生类构造函数和静态方法中使用
     不能单独引用 super 关键字，要么用它调用构造函数，要么用它引用静态方法。
    class Vehicle {}
    class Bus extends Vehicle {
     constructor() {
     console.log(super);
     // SyntaxError: 'super' keyword unexpected here
     }
    } 
     调用 super()会调用父类构造函数，并将返回的实例赋值给 this。
     super()的行为如同调用构造函数，如果需要给父类构造函数传参，则需要手动传入。
     如果没有定义类构造函数，在实例化派生类时会调用 super()，而且会传入所有传给派生类的参数。
     在类构造函数中，不能在调用 super()之前引用 this。
     如果在派生类中显式定义了构造函数，则要么必须在其中调用 super()，要么必须在其中返回一个对象。

40.函数声明
        每个函数都是Function
    类型的实例，而 Function 也有属性和方法，跟其他引用类型一样。因为函数是对象，所以函数名就是
    指向函数对象的指针，而且不一定与函数本身紧密绑定。

    1，函数通常以函数声明的方式定义
    function sum (num1, num2) {
        return num1 + num2;
    } 
    注意函数定义最后没有加分号。

    2，另一种定义函数的语法是函数表达式。函数表达式与函数声明几乎是等价的：
    let sum = function(num1, num2) {
     return num1 + num2;
    }; 
    3，还有一种定义函数的方式与函数表达式很像，叫作“箭头函数”（arrow function），如下所示：
    let sum = (num1, num2) => {
     return num1 + num2;
    }; 
    4.最后一种定义函数的方式是使用 Function 构造函数。这个构造函数接收任意多个字符串参数，最
      后一个参数始终会被当成函数体，而之前的参数都是新函数的参数。来看下面的例子：
    let sum = new Function("num1", "num2", "return num1 + num2"); // 不推荐

        ECMAScript 6 的所有函数对象都会暴露一个只读的 name 属性，其中包含关于函数的信息。多数情
    况下，这个属性中保存的就是一个函数标识符，或者说是一个字符串化的变量名。即使函数没有名称，
    也会如实显示成空字符串。如果它是使用 Function 构造函数创建的，则会标识成"anonymous"：
    function foo() {}
    let bar = function() {};
    let baz = () => {};
    console.log(foo.name); // foo
    console.log(bar.name); // bar
    console.log(baz.name); // baz
    console.log((() => {}).name); //（空字符串）
    console.log((new Function()).name); // anonymous 


        收集参数的前面如果还有命名参数，则只会收集其余的参数；如果没有则会得到空数组。因为收集
    参数的结果可变，所以只能把它作为最后一个参数：
    // 不可以
    function getProduct(...values, lastValue) {}
    // 可以
    function ignoreFirst(firstValue, ...values) {
     console.log(values);
    } 

41.函数内部
        在 ECMAScript 5 中，函数内部存在两个特殊的对象：arguments 和 this。ECMAScript 6 又新增
    了 new.target 属性。

        ECMAScript 5 也会给函数对象上添加一个属性：caller。虽然 ECMAScript 3 中并没有定义，但所
    有浏览器除了早期版本的 Opera 都支持这个属性。这个属性引用的是调用当前函数的函数，或者如果是
    在全局作用域中调用的则为 null。

    new.target
        ECMAScript 中的函数始终可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。
    ECMAScript 6 新增了检测函数是否使用 new 关键字调用的 new.target 属性。如果函数是正常调用的，
    则 new.target 的值是 undefined；如果是使用 new 关键字调用的，则 new.target 将引用被调用的
    构造函数。

42.函数属性和方法
        ECMAScript 中的函数是对象，因此有属性和方法。每个函数都有两个属性：length
    和 prototype。其中，length 属性保存函数定义的命名参数的个数
    function sayName(name) {
     console.log(name);
    }
    function sum(num1, num2) {
     return num1 + num2;
    }
    function sayHi() {
     console.log("hi");
    }
    console.log(sayName.length); // 1
    console.log(sum.length); // 2
    console.log(sayHi.length); // 0 


43.窗口大小
        浏览器窗口尺寸通常无法满足完整显示整个页面，为此用户可以通过滚动在有限的视口中查看文
    档。度量文档相对于视口滚动距离的属性有两对，返回相等的值：window.pageXoffset/window.
    scrollX 和 window.pageYoffset/window.scrollY。
        可以使用 scroll()、scrollTo()和 scrollBy()方法滚动页面。这 3 个方法都接收表示相对视口距
    离的 x 和 y 坐标，这两个参数在前两个方法中表示要滚动到的坐标，在最后一个方法中表示滚动的距离。
44.视口位置
    // 相对于当前视口向下滚动 100 像素
    window.scrollBy(0, 100);
    // 相对于当前视口向右滚动 40 像素
    window.scrollBy(40, 0);
    // 滚动到页面左上角
    window.scrollTo(0, 0); 

        这几个方法也都接收一个 ScrollToOptions 字典，除了提供偏移值，还可以通过 behavior 属性
    告诉浏览器是否平滑滚动。
    // 正常滚动
    window.scrollTo({
     left: 100,
     top: 100,
     behavior: 'auto'
    });
    // 平滑滚动
    window.scrollTo({
     left: 100,
     top: 100,
     behavior: 'smooth'
    });
45.导航与打开新窗口
        window.open()方法可以用于导航到指定 URL，也可以用于打开新浏览器窗口。这个方法接收 4
    个参数：要加载的 URL、目标窗口、特性字符串和表示新窗口在浏览器历史记录中是否替代当前加载页
    面的布尔值。通常，调用这个方法时只传前 3 个参数，最后一个参数只有在不打开新窗口时才会使用。
        如果 window.open()的第二个参数是一个已经存在的窗口或窗格（frame）的名字，则会在对应的
    窗口或窗格中打开 URL。下面是一个例子：
    // 与<a href="http://www.wrox.com" target="topFrame"/>相同
    window.open("http://www.wrox.com/", "topFrame"); 

46.定时器
        注意 这里的关键点是，第二个参数，也就是间隔时间，指的是向队列添加新任务之前等
    待的时间。比如，调用 setInterval()的时间为 01:00:00，间隔时间为 3000 毫秒。这意
    味着 01:00:03 时，浏览器会把任务添加到执行队列。浏览器不关心这个任务什么时候执行
    或者执行要花多长时间。因此，到了 01:00:06，它会再向队列中添加一个任务。由此可看
    出，执行时间短、非阻塞的回调函数比较适合 setInterval()。

47.对话框
    // 显示打印对话框
    window.print();
    // 显示查找对话框
    window.find();
48.查询字符串
    URLSearchParams
        URLSearchParams 提供了一组标准 API 方法，通过它们可以检查和修改查询字符串。给
    URLSearchParams 构造函数传入一个查询字符串，就可以创建一个实例。这个实例上暴露了 get()、
    set()和 delete()等方法，可以对查询字符串执行相应操作。
      let qs = "?q=javascript&num=10";
      let searchParams = new URLSearchParams(qs);
      searchParams.set("page", "3");
    //   console.log(searchParams.get("q"));
    //   console.log(searchParams.get("num"));
    //   console.log(searchParams.get("page"));
    //   searchParams.delete("q");
    for (const item of searchParams) {
        console.log(item);
    }
49.操作地址
        可以通过修改 location 对象修改浏览器的地址。首先，最常见的是使用 assign()方法并传入一
    个 URL，如下所示：
    location.assign("http://www.wrox.com");
        这行代码会立即启动导航到新 URL 的操作，同时在浏览器历史记录中增加一条记录。如果给
    location.href 或 window.location 设置一个 URL，也会以同一个 URL 值调用 assign()方法。比
    如，下面两行代码都会执行与显式调用 assign()一样的操作：
    window.location = "http://www.wrox.com";
    location.href = "http://www.wrox.com"; 

50
        document 对象上还暴露了几个特殊集合，这些集合也都是 HTMLCollection 的实例。这些集合是
    访问文档中公共部分的快捷方式，列举如下。
     document.anchors 包含文档中所有带 name 属性的<a>元素。
     document.applets 包含文档中所有<applet>元素（因为<applet>元素已经不建议使用，所
    以这个集合已经废弃）。
     document.forms 包含文档中所有<form>元素（与 document.getElementsByTagName ("form")
    返回的结果相同）。
     document.images 包含文档中所有<img>元素（与 document.getElementsByTagName ("img")
    返回的结果相同）。
     document.links 包含文档中所有带 href 属性的<a>元素。

51.node类型
    DOM 中总共有 12 种节点类型，这些类型都继承一种基本类型。
        DOM Level 1 描述了名为 Node 的接口，这个接口是所有 DOM 节点类型都必须实现的。Node 接口
    在 JavaScript中被实现为 Node 类型，在除 IE之外的所有浏览器中都可以直接访问这个类型。在 JavaScript
    中，所有节点类型都继承 Node 类型，因此所有类型都共享相同的基本属性和方法。
    每个节点都有 nodeType 属性，表示该节点的类型。节点类型由定义在 Node 类型上的 12 个数值
    常量表示：
     Node.ELEMENT_NODE（1）
     Node.ATTRIBUTE_NODE（2）
     Node.TEXT_NODE（3）
     Node.CDATA_SECTION_NODE（4） 
     Node.ENTITY_REFERENCE_NODE（5）
     Node.ENTITY_NODE（6）
     Node.PROCESSING_INSTRUCTION_NODE（7）
     Node.COMMENT_NODE（8）
     Node.DOCUMENT_NODE（9）
     Node.DOCUMENT_TYPE_NODE（10）
     Node.DOCUMENT_FRAGMENT_NODE（11）
     Node.NOTATION_NODE（12）
    节点类型可通过与这些常量比较来确定，比如：
    if (someNode.nodeType == Node.ELEMENT_NODE){
     alert("Node is an element.");
    } 

52.Document 类型
        Document 类型是 JavaScript 中表示文档节点的类型。在浏览器中，文档对象 document 是
    HTMLDocument 的实例（HTMLDocument 继承 Document），表示整个 HTML 页面。document 是 
    window对象的属性，因此是一个全局对象。Document 类型的节点有以下特征：
     nodeType 等于 9；
     nodeName 值为"#document"；
     nodeValue 值为 null；
     parentNode 值为 null；
     ownerDocument 值为 null；
     子节点可以是 DocumentType（最多一个）、Element（最多一个）、ProcessingInstruction
    或 Comment 类型。

    document.domain
        当页面中包含来自某个不同子域的窗格（<frame>）或内嵌窗格（<iframe>）时，设置
    document.domain 是有用的。因为跨源通信存在安全隐患，所以不同子域的页面间无法通过 JavaScript
    通信。此时，在每个页面上把 document.domain 设置为相同的值，这些页面就可以访问对方的 JavaScript
    对象了。比如，一个加载自 www.wrox.com 的页面中包含一个内嵌窗格，其中的页面加载自
    p2p.wrox.com。这两个页面的 document.domain 包含不同的字符串，内部和外部页面相互之间不能
    访问对方的 JavaScript 对象。如果每个页面都把 document.domain 设置为 wrox.com，那这两个页面
    之间就可以通信了。

53.Element 类型
        除了Document 类型，Element 类型就是Web开发中最常用的类型了。Element 表示XML或HTML
    元素，对外暴露出访问元素标签名、子节点和属性的能力。Element 类型的节点具有以下特征：
     nodeType 等于 1；
     nodeName 值为元素的标签名；
     nodeValue 值为 null；
     parentNode 值为 Document 或 Element 对象；
     子节点可以是 Element、Text、Comment、ProcessingInstruction、CDATASection、
    EntityReference 类型。

54.Text 类型
        Text 节点由 Text 类型表示，包含按字面解释的纯文本，也可能包含转义后的 HTML 字符，但不
    含 HTML 代码。Text 类型的节点具有以下特征：
     nodeType 等于 3；
     nodeName 值为"#text"；
     nodeValue 值为节点中包含的文本；
     parentNode 值为 Element 对象；
     不支持子节点。
55.Comment 类型
        DOM 中的注释通过 Comment 类型表示。Comment 类型的节点具有以下特征：
     nodeType 等于 8；
     nodeName 值为"#comment"；
     nodeValue 值为注释的内容；
     parentNode 值为 Document 或 Element 对象；
     不支持子节点。

56.DocumentType 类型
        DocumentType 类型的节点包含文档的文档类型（doctype）信息，具有以下特征：
     nodeType 等于 10；
     nodeName 值为文档类型的名称；
     nodeValue 值为 null；
     parentNode 值为 Document 对象；
     不支持子节点。

57.DocumentFragment 类型
        在所有节点类型中，DocumentFragment 类型是唯一一个在标记中没有对应表示的类型。DOM 将
    文档片段定义为“轻量级”文档，能够包含和操作节点，却没有完整文档那样额外的消耗。
    DocumentFragment 节点具有以下特征：
     nodeType 等于 11；
     nodeName 值为"#document-fragment"；
     nodeValue 值为 null；
     parentNode 值为 null；
     子节点可以是 Element、ProcessingInstruction、Comment、Text、CDATASection 或
    EntityReference。

58.Attr 类型
        元素数据在 DOM 中通过 Attr 类型表示。Attr 类型构造函数和原型在所有浏览器中都可以直接访
    问。技术上讲，属性是存在于元素 attributes 属性中的节点。Attr 节点具有以下特征：
     nodeType 等于 2；
     nodeName 值为属性名；
     nodeValue 值为属性值；
     parentNode 值为 null；
     在 HTML 中不支持子节点；
     在 XML 中子节点可以是 Text 或 EntityReference。

59.MutationObserver 接口
    MutationObserver 的实例要通过调用 MutationObserver 构造函数并传入一个回调函数来创建：
    let observer = new MutationObserver(() => console.log('DOM was mutated!')); 

        新创建的 MutationObserver 实例不会关联 DOM 的任何部分。要把这个 observer 与 DOM 关
    联起来，需要使用 observe()方法。这个方法接收两个必需的参数：要观察其变化的 DOM 节点，以及
    一个 MutationObserverInit 对象。

    subtree 布尔值，表示除了目标节点，是否观察目标节点的子树（后代）
    如果是 false，则只观察目标节点的变化；如果是 true，则观察目标节点及其整个子树
    默认为 false

    attributes 布尔值，表示是否观察目标节点的属性变化
    默认为 false

    attributeFilter 字符串数组，表示要观察哪些属性的变化
    把这个值设置为 true 也会将 attributes 的值转换为 true
    默认为观察所有属性

    attributeOldValue 布尔值，表示 MutationRecord 是否记录变化之前的属性值
    把这个值设置为 true 也会将 attributes 的值转换为 true
    默认为 false

    characterData 布尔值，表示修改字符数据是否触发变化事件
    默认为 false

    characterDataOldValue 布尔值，表示 MutationRecord 是否记录变化之前的字符数据
    把这个值设置为 true 也会将 characterData 的值转换为 true
    默认为 false

    childList 布尔值，表示修改目标节点的子节点是否触发变化事件
    默认为 false

60.scrollIntoView()
        scrollIntoView()方法存在于所有 HTML 元素上，可以滚动浏览器窗口或容器元素以便包含元
    素进入视口。
    这个方法的参数如下：
     alignToTop 是一个布尔值。
         true：窗口滚动后元素的顶部与视口顶部对齐。
         false：窗口滚动后元素的底部与视口底部对齐。
     scrollIntoViewOptions 是一个选项对象。
         behavior：定义过渡动画，可取的值为"smooth"和"auto"，默认为"auto"。
         block：定义垂直方向的对齐，可取的值为"start"、"center"、"end"和"nearest"，默
        认为 "start"。
         inline：定义水平方向的对齐，可取的值为"start"、"center"、"end"和"nearest"，默
        认为 "nearest"。
    *不传参数等同于 alignToTop 为 true。

70.本地存储
    // 使用方法存储数据
    localStorage.setItem("name", "Nicholas");
    // 使用属性存储数据
    localStorage.book = "Professional JavaScript";
    // 使用方法取得数据
    let name = localStorage.getItem("name");
    // 使用属性取得数据
    let book = localStorage.book; 
    
    sessionStorage同上

71.存储事件
        每当 Storage 对象发生变化时，都会在文档上触发 storage 事件。使用属性或 setItem()设置
    值、使用 delete 或 removeItem()删除值，以及每次调用 clear()时都会触发这个事件。这个事件的
    事件对象有如下 4 个属性。
     domain：存储变化对应的域。
     key：被设置或删除的键。
     newValue：键被设置的新值，若键被删除则为 null。
     oldValue：键变化之前的值。
    可以使用如下代码监听 storage 事件：
    window.addEventListener("storage",
     (event) => alert('Storage changed for ${event.domain}'));
    对于 sessionStorage 和 localStorage 上的任何更改都会触发 storage 事件，但 storage 事
    件不会区分这两者。